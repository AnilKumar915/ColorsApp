# name: Release Build
# on:
#   push:
#     tags:
#       - 'v*'

name: testrelease

# on:
#   push:
#     tags:
#       - "[0-9]+.[0-9]+.[0-9]+-beta" # eg. 1.2.5-beta

on:
  push:
    branches: ["main"]

permissions:
  contents: write
  statuses: read
  actions: read

env:
  EV_BUILD_START_NUMBER: 80

jobs:
  version:
    name: Create version number
    runs-on: macos-12
    steps:
      - uses: actions/checkout@v1
      - name: Fetch all history for all tags and branches
        run: |
          git config remote.origin.url https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }}
          git fetch --prune --depth=10000

      - name: "Extract version, build number and type"
        run: |
          echo "EV_BUILD_VERSION=$(echo ${{ github.ref_name }} | sed 's/-.*//')" >> $GITHUB_ENV
          echo "EV_BUILD_NUMBER=$(echo $(expr $EV_BUILD_START_NUMBER + ${{ github.run_number }}))" >> $GITHUB_ENV
          echo "EV_BUILD_TYPE=$(echo ${{ github.ref_name }} | sed 's/.*-//')" >> $GITHUB_ENV

    # - name: Install GitVersion
    #   uses: gittools/actions/gitversion/setup@v0.9.3
    #   with:
    #       versionSpec: '5.2.x'
    # - name: Use GitVersion
    #   id: gitversion
    #   uses: gittools/actions/gitversion/execute@v0.9.3
    # - name: Create version.txt with nuGetVersion
    #   run: echo ${{ steps.gitversion.outputs.nuGetVersion  }} > version.txt
    # - name: Upload version.txt
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: gitversion
    #     path: version.txt
  build:
    name: Build and Create release
    needs: [version]
    runs-on: macos-12
    steps:
      - uses: actions/checkout@v1

      - name: "Setup codemagic cli tools"
        run: |
          pip3 install codemagic-cli-tools

      - name: "Download AppStore API private key"
        id: apptstore_private_key
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: appstore_private.key
          encodedString: ${{ secrets.APPSTORE_PRIVATE_API_KEY }}

      - name: "Download AppStore P12 Certificate"
        id: apptstore_p12_cert
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: appstore_cert.p12
          encodedString: ${{ secrets.APPSTORE_P12_FILE }}

      - name: "Extract AppStore P12 Certificate Key"
        run: |
          openssl pkcs12 -in ${{ steps.apptstore_p12_cert.outputs.filePath }} -nodes -nocerts -passin pass:${{ secrets.ES_APPSTORE_SIGNING_CERT_P12_PASSWORD }} | openssl rsa -out $HOME/appstore_signing_cert.key

      # - name: "Setup AppStore dependencies"
      #   run: |
      #     keychain initialize
      #     app-store-connect fetch-signing-files \
      #       --issuer-id=${{ secrets.ES_APPSTORE_ISSUER_ID }} \
      #       --key-id=${{ secrets.ES_APPSTORE_KEY_ID }} \
      #       --private-key=@file:${{ steps.apptstore_private_key.outputs.filePath }} \
      #       --certificate-key=@file:$HOME/appstore_signing_cert.key \
      #       --strict-match-identifier \
      #       --platform=IOS \
      #       --type=IOS_APP_STORE \
      #       --create \
      #       $(xcode-project detect-bundle-id)
      #     keychain add-certificates
      #     xcode-project use-profiles

      # - name: "Build iOS release"
      #   run: |
      #     pod repo update
      #     find . -name "Podfile" -execdir pod install \;
      #     flutter build ipa --release --build-name=${{ env.EV_BUILD_VERSION }} --build-number=${{ env.EV_BUILD_NUMBER }} --export-options-plist=$HOME/export_options.plist

      # - name: Get version.txt
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: gitversion
      # - name: Create new file without newline char from version.txt
      #   run: tr -d '\n' < version.txt > version1.txt
      # - name: Read version
      #   id: version
      #   uses: juliangruber/read-file-action@v1
      #   with:
      #     path: version1.txt
      # - name: Update version in YAML
      #   run: sed -i '1.0.12/${{ github.run_number }}/g' pubspec.yaml
      # - name: "Download Android keystore (Beta)"
      #   uses: timheuer/base64-to-file@v1.2
      #   with:
      #     fileName: upload-keystore.jks
      #     encodedString: ${{ secrets.ES_ANDROID_KEYSTORE_BASE64 }}

      # - name: Update KeyStore password in gradle properties
      #   run: sed -i 's/#{KEYSTORE_PASS}#/${{ secrets.KEYSTORE_PASS }}/g' android/key.properties
      # - name: Update KeyStore key password in gradle properties
      #   run: sed -i 's/#{KEYSTORE_KEY_PASS}#/${{ secrets.KEYSTORE_KEY_PASS }}/g' android/key.properties
      # - name: Keystore alias
      #   run: sed -i 's/#{KEYSTORE_KEY_ALIAS}#/${{ secrets.KEYSTORE_KEY_ALIAS }}/g' android/key.properties
      # - run: |
      #     echo "storePassword=${{ secrets.KEYSTORE_PASS }}" >> android/key.properties
      #     echo "keyPassword=${{ secrets.KEYSTORE_KEY_PASS }}" >> android/key.properties\
      # - uses: actions/setup-java@v1
      #   with:
      #     java-version: '12.x'
  #     - name: "Setup java for Android"
  #       uses: actions/setup-java@v3
  #       with:
  #         distribution: "zulu"
  #         java-version: "11"
  #         cache: "gradle"

  #     - uses: subosito/flutter-action@v2
  #       with:
  #         channel: "stable"
  #         flutter-version: "3.3.2"
  #         cache: true
  #     - run: flutter clean
  #     - run: flutter pub get
  #     # - run: flutter test
  #     - run: flutter build apk --release --split-per-abi
  #     - run: flutter build appbundle
  #     - name: Create a Release in GitHub
  #       uses: ncipollo/release-action@v1
  #       with:
  #         artifacts: "build/app/outputs/apk/release/*.apk,build/app/outputs/bundle/release/app-release.aab"
  #         token: ${{ secrets.GH_TOKEN }}
  #         # tag:  '1.0.20' #${{ steps.version.outputs.content }}
  #         commit: ${{ github.sha }}
  #     - name: Upload app bundle
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: appbundle
  #         path: build/app/outputs/bundle/release/app-release.aab
  # release:
  #   name: Release app to internal track
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     # - uses: actions/checkout@v1
  #     - name: Get appbundle from artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: appbundle
  #     - name: Release app to internal track
  #       uses: r0adkll/upload-google-play@v1
  #       with:
  #         serviceAccountJsonPlainText: ${{ secrets.PLAYSTORE_ACCOUNT_KEY }}
  #         packageName: com.colors.cicdsample
  #         releaseFiles: app-release.aab
  #         track: internal
  #         status: completed
